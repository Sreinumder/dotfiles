set ratios 1:2:3
set shell bash
set shellopts '-eu'
set ifs "\n" set scrolloff 10
set cursorpreviewfmt "\033[7;2m"

set incsearch
set smartcase
set ignorecase
set anchorfind
set findlen 1
set tabstop 4
set info size
set preview
set dircounts

setlocal ~/Downloads sortby "atime"
setlocal ~/Downloads reverse

set cursorpreviewfmt "\033[7;2m"
set previewer '~/.config/lf/previewer'
set cleaner '~/.config/lf/cleaner'
set icons

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

cmd open &{{
  case $(file --mime-type "$(readlink -f $f)" -b) in
    text/*|application/json|inode/x-empty|application/octet-stream|*/conf) lf -remote "send $id \$$EDITOR \$fx";;
    image/*)  ~/dotfiles/lf-scripts/./nsxivM.sh \$fx";;
    *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
  esac
}}


cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Create a directory with the selected items
cmd new-folder-with-selection ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}

# og
# cmd delete ${{
#     echo "can do"
#     set -f
#     printf "$fs\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rmtrash -rf $fs
# }}

# dont delte rise or home dir
# cmd delete ${{
#     case $1 in
#       "rise" | "home")
#         echo "cant delete"
#         ;;
#       *)
#         echo "can do"
#         set -f
#         printf "$fs\n"
#         printf "delete?[y/n]"
#         read ans
#         [ "$ans" = "y" ] && rmtrash -rf $fs
#     esac
# }}

cmd delete ${{
  if [[ $PWD == "/" || $PWD == "/home" ]]; then
    echo "cant in $PWD dir :("
    exit 1
  fi
  set -f
  echo "$fx"
  printf "delete?[y/n]"
  read ans
  [ "$ans" = "y" ] && rmtrash -rf $fx
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar) tar xvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
        *) echo "Unsupported format";;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}} 

cmd select-all :unselect; invert

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | pbcopy }}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
  echo $fx | tr ' ' '\n' | pbcopy
}}

# Select the file or directory via fzf
cmd fzf-select ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --hidden --follow $exclude | fzf) || true
  lf -remote "send $id select $select"
}}

# cd into the selected directory via fzf
cmd fzf-cd ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --type d --hidden --follow $exclude | fzf) || true
  lf -remote "send $id cd $select"
}}

# zoxide
cmd z %{{
  result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
  result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}

map zo z
map zi zi
cmd nopreview &{{
	lf -remote "send $id set nopreview"
	lf -remote "send $id set ratios 1:3"
}}

cmd preview &{{
	lf -remote "send $id set preview"
	lf -remote "send $id set ratios 1:3"
}}

cmd default &{{
	lf -remote "send $id set preview"
	lf -remote "send $id set ratios 1:2:3"
}}
cmd imageView &{{
    lf -remote "send dotfiles/lf-scripts/./nsxivM.sh \$fx";;
}}
cmd setWal &{{
    lf -remote "send ~/dotfiles/scripts/wallpaper.sh \$fx";;
}}
map W setWal
map ( preview
map * default
map ) nopreview

map ii <enter> ~/dotfiles/lf-scripts/nsxivM.sh \$fx & <enter>

#unbind defaults
map e

map <enter> shell

map H jump-prev
map L jump-next
map J push 4j
map K push 4k

map <tab> :toggle;down
map yy copyj
map yn copy-filename
map yP copy-absolute-path

map U !printf "\n";du -csh *
map <c-f> fzf-select
map <c-j> fzf-cd

# give a name and then make a directory
map ad push :mkdir<space>
map aa push <enter>touch<space>
map A new-folder-with-selection

map nd push <enter>nvim<space>.<enter>
map nn push <enter>nvim<space>$fx<enter>
map nm push <enter>mpv<space>$fx<enter>

cmd emacso &{{
  ( emacs $fx & )
}}
map em emacso
map ed -remote "send emacs ."

# all custom mappings
map D delete

map ee extract
map el $$EDITOR ~/.config/lf/lfrc
map en $$EDITOR ~/.config/nvim
map ek $$EDITOR ~/.config/kitty
map <space>c push :zip<space>
map r
map rr rename # at the very end
map ra push A<c-a> # at the very beginning
map rn push A<c-u> # rename the filename
map re push A<c-f><c-k> # rename the extension

map n
# [g]o [.]config/[?]__
map g.l cd ~/.config/lf
map g.a cd ~/.config/alacritty
map g.r cd ~/.config/rofi
map g.k cd ~/.config/kitty
map g.nn cd ~/.config/nvim
map g.np cd ~/.config/nvim/lua/risedev/plugins/
map g.nc cd ~/.config/nvim/lua/risedev/core/
map g.h cd ~/dotfiles/hypr
map g.D cd ~/dotfiles/dunst
map gd.. cd ~/dotfiles
map gd.h cd ~/dotfiles/hypr/
map gd.hc cd ~/dotfiles/hypr/conf

# [g]o [d]irectly to [?]__
map g.. cd ~/.config
map gdd cd ~/Downloads
map gdp cd ~/Pictures
map gds cd ~/Desktop
map gdn cd ~/notes
map gdm cd ~/Music
map gjm cd ~/Downloads/manga/
map gdo cd ~/Documents
map gdr cd ~/rose
map gdw cd ~/wallpaper

# [g]o [?]__/[?]__
map grl cd ~/rose/learn
map grpl cd ~/rose/py/class
map grpl cd ~/rose/py/lab
map grpp cd ~/rose/py/project

map grn cd ~/rose/norg
map grd cd ~/rose/dotReferences
map grt cd ~/rose/tools

#bunch of stuff idk
# map x $$f
# map X !$f

cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

